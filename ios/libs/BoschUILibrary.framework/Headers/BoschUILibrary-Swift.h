#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 effective-4.1.50 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef BOSCHUILIBRARY_SWIFT_H
#define BOSCHUILIBRARY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BoschUILibrary",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         An Activity Indicator is a small animated element with a defined size that is used to bridge idle times while an app is operating in the background and can not be used for a certain period.
///       </li>
///       <li>
///         They are designed to visually please users and enhance the brand experience with Bosch while using an app. Activity Indicators are noninteractive elements which are either displayed as a popover on the whole screen or at a specific, content pending position.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Activity Indicators should be used in any situation where an app needs time to be ready for operation.
///       </li>
///       <li>
///         Avoid using it, when the loading time is less than 3 seconds.
///       </li>
///       <li>
///         In contrast to Progress Indicators, an Activity Indicator shows activity of the system that is not caused by an user action.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary22BoschActivityIndicator")
@interface BoschActivityIndicator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         The Bottom Navigation allows quick switching between top level views of an app.
///       </li>
///       <li>
///         It is represented by an icon bar located in the bottom of the screen that consists of minimum 3 to maximum 5 icons, promoting awareness of alternate views.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         It is recommended to use the Bottom Navigation
///         <ul>
///           <li>
///             When your information architecture contains maximum 5 top level views
///           </li>
///           <li>
///             When all top level views are equally important and do not include infrequent destinations
///           </li>
///           <li>
///             When typical use cases with your app demand a frequent switching between top level views
///           </li>
///           <li>
///             When functionalities, controls or views are not supposed to be affected by a fixed bottom bar
///           </li>
///         </ul>
///       </li>
///       <li>
///         The Bottom Navigation should not be paired with the Side Navigation.
///       </li>
///       <li>
///         To decide which navigation pattern fits better to your app, see further hints in the section about Navigation.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary21BoschBottomNavigation")
@interface BoschBottomNavigation : UIControl
/// Sets up gray line and height.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates internal constraints for bottomItems.
- (void)updateConstraints;
@end


/// Contains title and image of one bottom item.
/// Array of BoschBottomNavigationItems can be set as BoschBottomNavigation.
SWIFT_CLASS("_TtC14BoschUILibrary25BoschBottomNavigationItem")
@interface BoschBottomNavigationItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIImage;
@class NSString;
@class UIColor;

/// <ul>
///   <li>
///     Definiton:
///     <ul>
///       <li>
///         Buttons are clickable areas triggering a function that is assigned to the button.
///       </li>
///       <li>
///         Buttons need to be labeled in such a way that the user knows which function is assigned to the button.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary11BoschButton")
@interface BoschButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// Sets the image of the button
/// Sets no image if given image is nil
- (void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
/// Sets the title of the button
/// Sets no title if given title is nil or an empty string
- (void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
- (void)setTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14BoschUILibrary13BoschCheckBox")
@interface BoschCheckBox : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Calls updateCheckbox() to handle appearance for isEnabled-state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Calls updateCheckbox() to handle appearance for isHighlighted-state.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// Calls updateCheckbox() to handle appearance for isSelected-state.
@property (nonatomic, getter=isSelected) BOOL selected;
/// Sets the title of the checkbox
/// Sets no title if given title is nil or an empty string
- (void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
/// Deny customization for title color.
- (void)setTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state;
/// Handles constraints of a checkbox with or without title.
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Progress Indicators visualize the progress of an operation that is caused by the user.
///       </li>
///       <li>
///         They can be determinate (loading duration is known) or indeterminate (loading duration is unknown).
///       </li>
///       <li>
///         Progress Indicators are noninteractive elements which are displayed at a specific, content pending position.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Progress Indicators should be used to visualize the progress of operations caused by the user.
///       </li>
///       <li>
///         (See also Activity Indicator).
///       </li>
///       <li>
///         Determinated Progress Indicators should only be used for operations that are measurable, e.g. the loading time of a download.
///       </li>
///       <li>
///         Indeterminated Progress Indicators should only be used for operations that are not measurable, e.g. loading additional content on a page.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary22BoschProgressIndicator")
@interface BoschProgressIndicator : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Progress Indicators visualize the progress of an operation that is caused by the user.
///       </li>
///       <li>
///         They can be determinate (loading duration is known) or indeterminate (loading duration is unknown).
///       </li>
///       <li>
///         Progress Indicators are noninteractive elements which are displayed at a specific, content pending position.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Progress Indicators should be used to visualize the progress of operations caused by the user.
///       </li>
///       <li>
///         (See also Activity Indicator).
///       </li>
///       <li>
///         Determinated Progress Indicators should only be used for operations that are measurable, e.g. the loading time of a download.
///       </li>
///       <li>
///         Indeterminated Progress Indicators should only be used for operations that are not measurable, e.g. loading additional content on a page.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary33BoschDeterminateProgressIndicator")
@interface BoschDeterminateProgressIndicator : BoschProgressIndicator
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Dividers are thin lines that separate content of an app in sections.
///       </li>
///       <li>
///         Dividers clarify the connection of different elements and help to organize and structure the contents, e.g. in a list.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary12BoschDivider")
@interface BoschDivider : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The divider with the height of one LU will always be
/// displayed in the middle of the given frame
- (void)layoutSubviews;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Dropdown provides several predefined options or values from which the user can choose one.
///       </li>
///       <li>
///         By tapping on the Dropdown, it displays a list of available options from which the user can pick one.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         The usage of a Dropdown is recommended, when a direct listing of available options would take up a lot of space.
///       </li>
///       <li>
///         In cases of less options, the usage of Radio Buttons may be considered.
///       </li>
///       <li>
///         Don’t use a Dropdown when multiple options are possible.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Behavior:
///     <ul>
///       <li>
///         By tapping on the Dropdown, it expands and reveals a list of options.
///       </li>
///       <li>
///         The selected item is displayed in an active state.
///       </li>
///       <li>
///         With a short delay, the Dropdown collapses automatically and applies the selected option.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary13BoschDropdown")
@interface BoschDropdown : UIButton
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Gallery is a collection of images that are arranged in a grid on the screen.
///       </li>
///       <li>
///         Attached on each image is a label with one or two lines of text that give an idea of what the image is representing.
///       </li>
///       <li>
///         The images may link to another page.
///       </li>
///     </ul>
///   </li>
///   <li>
///     NumberOfItems must be set so that the gallery is displayed correctly.
///   </li>
///   <li>
///     BoschGalleryDelegate must be added as superclass to ViewController.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary12BoschGallery")
@interface BoschGallery : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Invalidates layout when the subviews are relayouted.
- (void)layoutSubviews;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;

@interface BoschGallery (SWIFT_EXTENSION(BoschUILibrary)) <UICollectionViewDataSource, UICollectionViewDelegate>
/// Returns set value from numberOfItems.
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// Returns given cells from initBoschGalleryCell().
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Custom UICollectionViewCell that presents one gallery item.
/// Handles image content and label information.
/// If no headline and no subline is set, no label will be displayed.
SWIFT_CLASS("_TtC14BoschUILibrary16BoschGalleryCell")
@interface BoschGalleryCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates constraints depending on tile size of gallery.
- (void)updateConstraints;
@end


SWIFT_CLASS("_TtC14BoschUILibrary17BoschGradientView")
@interface BoschGradientView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@end

@class UIEvent;
@class UITouch;

/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Sliders are control units to adjust the intensity of an output such as volume, temperature, or brightness.
///       </li>
///       <li>
///         They may also be used to visualize and control the progress of an embedded audio or video file.
///       </li>
///       <li>
///         Optionally, Sliders have a value indicator that appears in pressed state and displays the current value.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary11BoschSlider")
@interface BoschSlider : UIControl
/// Handles appearance for isEnabled-state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Handles apppearance for isHighlighted-state.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Layouts the dot and the active line to it’s current position.
- (void)layoutSubviews;
/// Detects if touch position is inside of touch area of dot.
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Removes value indicator if slider is not in highlighted state anymore.
- (void)removeFromSuperview;
/// Handles beginning of slide when touch is inside of touch area of dot.
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Updates current position of dot accordingly to touch position.
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Ends tracking.
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/// Cancels tracking.
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Sliders are control units to adjust the intensity of an output such as volume, temperature, or brightness.
///       </li>
///       <li>
///         They may also be used to visualize and control the progress of an embedded audio or video file.
///       </li>
///       <li>
///         Optionally, Sliders have a value indicator that appears in pressed state and displays the current value.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary21BoschHorizontalSlider")
@interface BoschHorizontalSlider : BoschSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Progress Indicators visualize the progress of an operation that is caused by the user.
///       </li>
///       <li>
///         They can be determinate (loading duration is known) or indeterminate (loading duration is unknown).
///       </li>
///       <li>
///         Progress Indicators are noninteractive elements which are displayed at a specific, content pending position.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Progress Indicators should be used to visualize the progress of operations caused by the user.
///       </li>
///       <li>
///         (See also Activity Indicator).
///       </li>
///       <li>
///         Determinated Progress Indicators should only be used for operations that are measurable, e.g. the loading time of a download.
///       </li>
///       <li>
///         Indeterminated Progress Indicators should only be used for operations that are not measurable, e.g. loading additional content on a page.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary35BoschIndeterminateProgressIndicator")
@interface BoschIndeterminateProgressIndicator : BoschProgressIndicator
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definiton:
///     <ul>
///       <li>
///         Buttons are clickable areas triggering a function that is assigned to the button.
///       </li>
///       <li>
///         Buttons need to be labeled in such a way that the user knows which function is assigned to the button.
///       </li>
///     </ul>
///   </li>
///   <li>
///     InvertedPrimaryButton:
///     <ul>
///       <li>
///         This button should be used exclusively on dark images.
///       </li>
///       <li>
///         The image in the preview below is not part of the button.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary26BoschInvertedPrimaryButton")
@interface BoschInvertedPrimaryButton : BoschButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Label is text that puts control elements in a context or conveys information.
///       </li>
///       <li>
///         A Label is usually related to an UI element so that the user knows which function is associated with it.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary10BoschLabel")
@interface BoschLabel : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Menu provides a list of choices related to the context that is currently displayed.
///       </li>
///       <li>
///         It may also be used in cases, where there is not enough space to display all options on the screen, e.g. in the Header.
///       </li>
///       <li>
///         Menus can appear upon interaction with a button, action, list item, or other control.
///       </li>
///       <li>
///         Menu items may cause an action or link to another screen.
///       </li>
///       <li>
///         They may also contain simple controls such as Checkboxes, Radio Buttons, or Switches.
///       </li>
///       <li>
///         For usage of these elements please note the referring chapter.
///       </li>
///       <li>
///         Menu items may be disabled if not applicable to a certain context.
///       </li>
///       <li>
///         Contextual Menus dynamically change their available menu items based on the current state of the app.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary9BoschMenu")
@interface BoschMenu : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains title, image, subItems and identifier information of one menu item.
SWIFT_CLASS("_TtC14BoschUILibrary13BoschMenuItem")
@interface BoschMenuItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIViewController;
@class NSBundle;

SWIFT_CLASS("_TtC14BoschUILibrary25BoschNavigationController")
@interface BoschNavigationController : UINavigationController <UINavigationControllerDelegate>
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         An Option Bar is a linear set of two or more items, each of which functions as a mutually exclusive button.
///       </li>
///       <li>
///         Each item can contain text or icons, or both.
///       </li>
///       <li>
///         Option Bars can be used to display different views, e.g. in a map.
///       </li>
///       <li>
///         Providing a single choice selection, Option Bars can be used alternatively to Radio Buttons.
///       </li>
///       <li>
///         In contrast to the Sub Navigation Bar, an Option Bar effects the current view instead of switching to another view.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary14BoschOptionBar")
@interface BoschOptionBar : UIControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         The Page Indicator is an abstract representation of the existing pages and shows on which page the user is located.
///       </li>
///       <li>
///         In addition, it may offer the possibility to switch to the corresponding page by tapping on one of the points.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary18BoschPageIndicator")
@interface BoschPageIndicator : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Handles beginning of tracking if touch is inside of contentView.
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Handles end of tracking.
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Popovers are contextual dialogs containing information, simple actions or options.
///       </li>
///       <li>
///         In contrast to Modal Dialogs, Popovers appear always as a consequence of a user action and are not modal.
///       </li>
///       <li>
///         They can be closed without any further action by tapping on the close icon in the upper right corner.
///       </li>
///       <li>
///         An arrow points to the component the Popover refers to.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary12BoschPopover")
@interface BoschPopover : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definiton:
///     <ul>
///       <li>
///         Buttons are clickable areas triggering a function that is assigned to the button.
///       </li>
///       <li>
///         Buttons need to be labeled in such a way that the user knows which function is assigned to the button.
///       </li>
///     </ul>
///   </li>
///   <li>
///     PrimaryButton:
///     <ul>
///       <li>
///         This button is used as a main button and call to action highlight on a screen.
///       </li>
///       <li>
///         Do not use more than one Primary Button per dialog or on a screen.
///       </li>
///       <li>
///         Use this button on light images.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary18BoschPrimaryButton")
@interface BoschPrimaryButton : BoschButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Radio Buttons are selection controls for options, where the selection of a single option from a group of options is required.
///       </li>
///       <li>
///         Like Checkboxes, Radio Buttons always need a label or text to make clear what the option is about.
///       </li>
///       <li>
///         They can also be used within Lists.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Use Radio Buttons in cases, where a single option needs to be selected (single choice).
///       </li>
///       <li>
///         Alternatively, a Dropdown can be used.
///       </li>
///       <li>
///         Don’t use Checkboxes for switching smartphone functionalities on or off (see Switch).
///       </li>
///     </ul>
///   </li>
///   <li>
///     Behavior:
///     <ul>
///       <li>
///         A group of Radio Buttons can only be completely inactive, as long as the user has not selected one of the options.
///       </li>
///       <li>
///         As soon as there was a selection, one option from the group stays active.
///       </li>
///       <li>
///         In contrary to Checkboxes, tapping on an active Radion Button will not deactivate it.
///       </li>
///       <li>
///         In order to change the selection, the user needs to tap on another Radio Button of the group.
///       </li>
///     </ul>
///   </li>
///   <li>
///     In order to work with other radio buttons you will need to add each radio button to a radio group.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary16BoschRadioButton")
@interface BoschRadioButton : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Handles appearance for isEnabled-state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Calls updateRadioButton() to handle appearance for isHighlighted-state.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
/// Specific radio button can be set selected programatically
@property (nonatomic, getter=isSelected) BOOL selected;
/// Sets the title of the radioButton
/// Sets no title if given title is nil or an empty string
- (void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
/// Deny customization of title color
- (void)setTitleColor:(UIColor * _Nullable)color forState:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Create a BoschRadioGroup to manage multiple BoschRadioButtons
SWIFT_CLASS("_TtC14BoschUILibrary15BoschRadioGroup")
@interface BoschRadioGroup : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definiton:
///     <ul>
///       <li>
///         Buttons are clickable areas triggering a function that is assigned to the button.
///       </li>
///       <li>
///         Buttons need to be labeled in such a way that the user knows which function is assigned to the button.
///       </li>
///     </ul>
///   </li>
///   <li>
///     SecondaryButton:
///     <ul>
///       <li>
///         This button should be used in combination with a Primary Button if there are more than one buttons on a screen.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary20BoschSecondaryButton")
@interface BoschSecondaryButton : BoschButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Definition:
/// The Side Navigation is an overlay panel that is only visible on demand and provides access to the top level views of an app.
/// It is accessible from a menu icon on the upper left corner of each main view.
/// Ideally, it contains not more than 8 menu points to avoid the need of scrolling within the panel.
SWIFT_CLASS("_TtC14BoschUILibrary19BoschSideNavigation")
@interface BoschSideNavigation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIGestureRecognizer;

@interface BoschSideNavigation (SWIFT_EXTENSION(BoschUILibrary)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains title, image and index information of one sideNavigation item.
SWIFT_CLASS("_TtC14BoschUILibrary23BoschSideNavigationItem")
@interface BoschSideNavigationItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         The Sub Navigation Bar consists of several tabs that structure the content within a top level view.
///       </li>
///       <li>
///         It is located below the app Header.
///       </li>
///       <li>
///         Each tab provides the affordance for displaying grouped content and allows easy switching between different views, data sets, or functional aspects.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         The Sub Navigation Bar should be used whenever an additional navigation hierarchy is needed to structure the content of a view.
///       </li>
///       <li>
///         It can be used as a supplement to either the Bottom Navigation, or the Side Navigation.
///       </li>
///       <li>
///         It is not designed to substitute them.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Please note:
///     <ul>
///       <li>
///         As swipe gestures are used for navigating between tabs, the Sub Navigation Bar should never be paired with content that requires swiping.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary21BoschSubNavigationBar")
@interface BoschSubNavigationBar : UIControl <UIScrollViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Updates constraints for all tabButtons, depending on scrollability.
- (void)updateConstraints;
/// If subviews gets layed out always check if all tabs do fit on the screen.
- (void)layoutSubviews;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Switch is a selection element that allows the user to control a certain functionality.
///       </li>
///       <li>
///         By tapping on a Switch, it toggles between two states, usually on and off.
///       </li>
///       <li>
///         In contrast to Checkbox and Radio Button, it does not require a group of elements.
///       </li>
///       <li>
///         A Switch always needs a label with a short and clear description of the corresponding functionality.
///       </li>
///       <li>
///         The label should be positioned in line with the Switch.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Use a Switch for any functionality that is either turned on or off and is effecting the behavior of an app by using device functionalities such as bluetooth, mobile internet, notifications, sounds, or display settings.
///       </li>
///       <li>
///         Provide a clear description of the functionality using a Label.
///       </li>
///       <li>
///         Never use verbs (switch…) or a status (… on) in the label to avoid confusion.
///       </li>
///       <li>
///         Switches can also be used within a List, e.g. on setting screens.
///       </li>
///       <li>
///         For further information see description of Lists.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary11BoschSwitch")
@interface BoschSwitch : UIButton
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Calls setAttributes() to handle appearance for isEnabled-state.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// Calls setAttributes() to handle appearance for isHighlighted-state.
/// Calls setNeedsLayout() for layout update.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)layoutSubviews;
/// Calling this func does nothing.
- (void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
/// Calling this func does nothing.
- (void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Contains title and image information of one tab.
SWIFT_CLASS("_TtC14BoschUILibrary8BoschTab")
@interface BoschTab : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Buttons are clickable areas triggering a function that is assigned to the button.
///       </li>
///       <li>
///         Buttons need to be labeled in such a way that the user knows which function is assigned to the button.
///       </li>
///     </ul>
///   </li>
///   <li>
///     TertiaryButton:
///     <ul>
///       <li>
///         This button can be used alternatively to the Secondary Button.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary19BoschTertiaryButton")
@interface BoschTertiaryButton : BoschButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         A Text Field is an input area for user generated text.
///       </li>
///       <li>
///         It is a single-line field which is fixed in height.
///       </li>
///       <li>
///         It may have a label that provides information about the required input.
///       </li>
///       <li>
///         Text is only editable, when the Text Field has been activated by tapping on it.
///       </li>
///       <li>
///         Tapping on the input area automatically brings up a keyboard and text can be entered.
///       </li>
///       <li>
///         Optionally, there is a feedback displayed after text input, e.g. in cases where the content needs to be validated.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     <ul>
///       <li>
///         Use a Text Field in all cases, where the user needs to input individual text that is not predictable.
///       </li>
///       <li>
///         Typical use cases are search functionalities, login screens, or user generated content.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary14BoschTextField")
@interface BoschTextField : UITextField
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns correct position for textRect.
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Returns correct position for editingRect.
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Returns correct position for placeholderRect.
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Sets the light gray editing background.
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Sets the clear background after editing was ended.
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Manages the editable text insets wether with or without label.
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC14BoschUILibrary21BoschValueModificator")
@interface BoschValueModificator : UIControl <UITextFieldDelegate>
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Determines if pasting a value is accepted or not.
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


/// <ul>
///   <li>
///     Definition:
///     <ul>
///       <li>
///         Sliders are control units to adjust the intensity of an output such as volume, temperature, or brightness.
///       </li>
///       <li>
///         They may also be used to visualize and control the progress of an embedded audio or video file.
///       </li>
///       <li>
///         Optionally, Sliders have a value indicator that appears in pressed state and displays the current value.
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BoschUILibrary19BoschVerticalSlider")
@interface BoschVerticalSlider : BoschSlider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end








#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
