require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '15.0'
install! 'cocoapods', :deterministic_uuids => false

target 'routematic' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    # Upcoming versions of React Native may rely on get_default_flags(), but
    # we make it explicit here to aid in the React Native upgrade process.
    :hermes_enabled => true,
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  
  permissions_path = '../node_modules/react-native-permissions/ios'
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera/Permission-Camera.podspec"
  pod 'Permission-LocationAlways', :path => "#{permissions_path}/LocationAlways/Permission-LocationAlways.podspec"
  pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse/Permission-LocationWhenInUse.podspec"
  
  pod 'Yoga', :path => '../node_modules/react-native/ReactCommon/yoga'
  
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  
  pod 'Google-Maps-iOS-Utils', :modular_headers => true
  pod 'GooglePlaces', '6.1.0', :modular_headers => true
  # pod 'GooglePlacePicker', :modular_headers => true // GooglePlacePicker was resolved to 2.0.0, which depends on GoogleMaps (= 2.0.0)
  pod 'GoogleMaps', '6.1.0', :modular_headers => true

#  pod 'BVLinearGradient', :path => '../node_modules/react-native-linear-gradient'
  
#  ParkZeus required pods start
  # pod 'Alamofire'
  pod 'Alamofire-SwiftyJSON'
  pod 'KeychainSwift', '~> 18.0'
  pod 'EVReflection'
#  pod 'GoogleMaps'
#  pod 'GooglePlaces'
  pod 'IQKeyboardManagerSwift'
  pod 'Cosmos', '~> 21.0'
  pod 'Toast-Swift', '~> 5.0.0'
  # pod 'Charts'
#  ParkZeus end

  target 'routematicTests' do
    inherit! :complete
    # Pods for testing
  end

  # 'GoogleMaps', 'GooglePlaces', 
  dynamic_frameworks = ['Alamofire', 'Alamofire-SwiftyJSON', 'SwiftyJSON', 'KeychainSwift', 'EVReflection', 'GoogleMaps', 'GooglePlaces', 'IQKeyboardManagerSwift', 'Cosmos', 'Toast-Swift', 'Charts', 'SwiftAlgorithms'] # <- swift libraries names

  # Make all the other frameworks into dynamic frameworks by overriding the dynamic_framework? function to return true
  pre_install do |installer|
    installer.pod_targets.each do |pod|
      if dynamic_frameworks.include?(pod.name)
        puts "Overriding the dynamic_framework? method for #{pod.name}"
        def pod.dynamic_framework?;
          true
        end
        def pod.build_type;
          Pod::BuildType.dynamic_framework
        end
      end
    end
  end

  post_install do |installer|
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
        
#        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
#        config.build_settings['OTHER_SWIFT_FLAGS'] = '-no-verify-emitted-module-interface'
#        config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
#        config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
        
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
        config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
        config.build_settings["ONLY_ACTIVE_ARCH"] = "YES"
        config.build_settings['OTHER_SWIFT_FLAGS'] = '-no-verify-emitted-module-interface'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
        
      end
    end
    react_native_post_install(
      installer,
      # Set `mac_catalyst_enabled` to `true` in order to apply patches
      # necessary for Mac Catalyst builds
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
